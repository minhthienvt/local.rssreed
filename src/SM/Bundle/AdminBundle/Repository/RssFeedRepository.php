<?php

namespace SM\Bundle\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use SM\Bundle\AdminBundle\Utilities\Rss;
use SM\Bundle\AdminBundle\Utilities\File;
use Doctrine\ORM\UnitOfWork;
use SM\Bundle\AdminBundle\SMAdminBundle;

/**
 * RssFeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RssFeedRepository extends EntityRepository
{

    /**
     * @param type $limit    limit
     * @param type $offset   offset
     * @param type $criteria criteria
     * @param type $orderBy  orderBy
     *
     * @return type
     */
    public function getList($limit = null, $offset = null, $criteria = array(), $orderBy = array())
    {
        return $this->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * get total
     *
     * @return type
     */
    public function getTotal()
    {
        $rst = $this->findAll();
        return count($rst);
    }

    /**
     * Adding new rss feed from entity
     *
     * @param \SM\Bundle\AdminBundle\Entity\RssFeed $entity
     *
     * @param string                                $pathFile
     *
     * @param string                                $baseUrl
     *
     * @param \SM\Bundle\AdminBundle\Entity\User    $user
     *
     * @return int $id
     */
    public function addByEntity(\SM\Bundle\AdminBundle\Entity\RssFeed $entity, $pathFile = '', $baseUrl = '', \SM\Bundle\AdminBundle\Entity\User $user)
    {
	$container = SMAdminBundle::getContainer();
        $em = $this->getEntityManager();
        $id = 0;
        if (is_object($entity)) {
            $entity->setUser($user);
            $entity->setTimeCron($entity->getTimeRefesh());
	    $usr = $container->getParameter('rss_user');
	    $pwd = $container->getParameter('rss_password');
            $xmlContent = Rss::getXmlByRssLink($entity->getExternalLink(), $usr, $pwd);            
            if ($xmlContent) {
                //Create xml file
                $fileName = $this->createXmlFile($xmlContent, $pathFile);
                //Get Internal link
                $internalLink = $baseUrl . '/' . $fileName;
                $entity->setInternalLink($internalLink);
                $entity->setStatus(1);
            } else {
                $entity->setStatus(0);
            }

            $beginTime = $entity->getBeginRefesh();
            if (empty($beginTime)) {
                $entity->setBeginRefesh(0);
            }
            $endTime = $entity->getEndRefesh();
            if (empty($endTime)) {
                $entity->setEndRefesh(23);
            }

            $em->persist($entity);
            $em->flush();
            $id = $entity->getId();

        }

        return $id;
    }

    /**
     * Create XML file
     *
     * @param type $xmlContent
     * @param type $pathFile
     * @return type
     */
    private function createXmlFile($xmlContent, $pathFile)
    {
        //Create file xml
        return File::createFileByContent($xmlContent, $pathFile);
    }

    /**
     * Delete item by array id
     *
     * @param array  $ids
     *
     * @param string $pathFile
     *
     * @return array
     */
    public function deleteByIds($ids = array(), $pathFile = '')
    {
        $em = $this->getEntityManager();
        $rst = array();
        if (is_array($ids) && count($ids)) {
            foreach ($ids as $id) {
                $entity = $this->find($id);
                $internalLink = $entity->getInternalLink();
                $em->remove($entity);
                if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                    $rst[] = $id;

                    //Remove xml file
                    $this->removeXmlFileByInternalLink($internalLink, $pathFile);
                }
            }
            $em->flush();
        }

        return $rst;
    }

    /**
     * Remove xml file
     *
     * @param type $internalLink
     * @param type $pathFile
     * @return boolean
     */
    private function removeXmlFileByInternalLink($internalLink, $pathFile = '')
    {
        if (!empty($internalLink)) {
            $fileName = $this->getFileNameByInternalLink($internalLink);
            if (!empty($fileName)) {
                $fileName = $pathFile . '/' . $fileName;
                if (file_exists($fileName)) {
                    return @unlink($fileName);
                }
            }
        }
        return false;
    }

    /**
     * get file name by internal link
     *
     * @param type $internalLink
     * @return type
     */
    private function getFileNameByInternalLink($internalLink)
    {
        $fileName = '';
        if (!empty($internalLink)) {
            $arr = explode("/", $internalLink);
            if (!empty($arr[count($arr) - 1])) {
                $fileName = $arr[count($arr) - 1];
            }
        }
        return $fileName;
    }

    /**
     * Adding new rss feed from entity
     *
     * @param \SM\Bundle\AdminBundle\Entity\RssFeed $entity
     *
     * @param string                                $pathFile
     *
     * @param \SM\Bundle\AdminBundle\Entity\User    $user
     *
     * @param string                                $baseUrl
     *
     * @return int $id
     */
    public function updateByEntity(\SM\Bundle\AdminBundle\Entity\RssFeed $entity, $pathFile = '', \SM\Bundle\AdminBundle\Entity\User $user, $baseUrl = '')
    {
        $em = $this->getEntityManager();
	$container = SMAdminBundle::getContainer();
        $id = 0;
        if (is_object($entity)) {
            $entity->setUser($user);
            $entity->setTimeCron($entity->getTimeRefesh());
		
	    $usr = $container->getParameter('rss_user');
	    $pwd = $container->getParameter('rss_password');

            $xmlContent = Rss::getXmlByRssLink($entity->getExternalLink(), $usr, $pwd);

            if ($xmlContent && $xmlContent != '') {
                //Create xml file
                $internalLink = $entity->getInternalLink();
                if ($internalLink) {
                    $this->editXmlInternalFile($xmlContent, $pathFile, $entity->getInternalLink());
                } else {
                    $fileName = $this->createXmlFile($xmlContent, $pathFile);
                    //Get Internal link
                    $internalLink = $baseUrl . '/' . $fileName;
                    $entity->setInternalLink($internalLink);
                }
                $entity->setStatus(1);
            } else {
                $entity->setStatus(0);
            }

            $beginTime = $entity->getBeginRefesh();
            if (empty($beginTime)) {
                $entity->setBeginRefesh(0);
            }
            $endTime = $entity->getEndRefesh();
            if (empty($endTime)) {
                $entity->setEndRefesh(23);
            }

            $em->persist($entity);
            $em->flush();
            $id = $entity->getId();

        }

        return $id;
    }

    /**
     * Edit file by internal link
     *
     * @param type $xmlContent
     * @param type $pathFile
     * @param type $internalLink
     */
    private function editXmlInternalFile($xmlContent, $pathFile, $internalLink)
    {
        if (!empty($internalLink)) {
            $fileName = $this->getFileNameByInternalLink($internalLink);
            $fileName = $pathFile . '/' . $fileName;
            File::editFileByContent($xmlContent, $fileName);
        }
    }

    /**
     * get feed by rss link
     *
     * @param \SM\Bundle\AdminBundle\Entity\RssFeed $entity
     * @return type
     */
    public function getItemFeedsByEntity(\SM\Bundle\AdminBundle\Entity\RssFeed $entity)
    {
        $itemFeeds = array();
        $internalLink = $entity->getInternalLink();
        if (!empty($internalLink)) {
            $itemFeeds = Rss::getItemFeedsByRssLink($internalLink);
        }
        return $itemFeeds;
    }

    /**
     * @param type $link
     * @return type
     */
    public function getInternalLinkAndStatusByLinkFromWebService($link, $email = '', $usr='', $pwd='')
    {
        $data = array('status' => 0, 'link' => '');
        if (!empty($link)) {
            $entity = $this->findBy(array('external_link' => $link));

            if (!empty($entity[0])) {
                $data['status'] = $entity[0]->getStatus();
                $data['link'] = $entity[0]->getInternalLink();
            } else {

                //external link is exist in database. We need to insert and build internal xml file
                $container = SMAdminBundle::getContainer();
                $pathFile = $container->get('kernel')->getRootDir()
                            . '/../web/' . $container->getParameter('dir_rss_feed');

                $baseUrl = $container->getParameter('host')
                            . $container->get('router')->getContext()->getBaseUrl()
                            . $container->getParameter('dir_rss_feed');

                $em = $this->getEntityManager();
                $entity = new \SM\Bundle\AdminBundle\Entity\RssFeed();
                $entity->setExternalLink($link);
                $xmlContent = Rss::getXmlByRssLink($entity->getExternalLink(), $usr, $pwd);
                $entity->setTitle('Flux XML MyPlace');
                $entity->setTimeRefesh(30);
                $entity->setTimeCron(30);
                $entity->setBeginRefesh(0);
                $entity->setEndRefesh(23);
                $entity->setAutomaticRefesh(1);
                $entity->setEmail($email);

                if ($xmlContent) {
                    //Create xml file
                    $fileName = $this->createXmlFile($xmlContent, $pathFile);
                    //Get Internal link
                    $internalLink = $baseUrl . '/' . $fileName;
                    $entity->setInternalLink($internalLink);
                    $entity->setStatus(1);
                    $entity->setMainStatus(2);
                } else {
                    $entity->setStatus(0);
                    $entity->setMainStatus(3);
                }

                $em->persist($entity);
                $em->flush();

                $data['status'] = $entity->getStatus();
                $data['link'] = $entity->getInternalLink();
            }
        }
        return $data;
    }

    /**
     * @param \SM\Bundle\AdminBundle\Entity\RssFeed $entity
     */
    public function refeshRss(\SM\Bundle\AdminBundle\Entity\RssFeed $entity)
    {
        $container = SMAdminBundle::getContainer();
        $pathFile = $container->get('kernel')->getRootDir()
                    . '/../web/' . $container->getParameter('dir_rss_feed');
	$usr = $container->getParameter('rss_user');
	$pwd = $container->getParameter('rss_password');
        $baseUrl = $container->getParameter('host')
                    . $container->get('router')->getContext()->getBaseUrl()
                    . $container->getParameter('dir_rss_feed');

        $em = $this->getEntityManager();
        $xmlContent = Rss::getXmlByRssLink($entity->getExternalLink(), $usr, $pwd);
        //$entity->setTitle('Refesh RSS');
        if ($xmlContent) {
            //Create xml file
            $internalLink = $entity->getInternalLink();
            if ($internalLink) {
                $this->editXmlInternalFile($xmlContent, $pathFile, $entity->getInternalLink());
            } else {
                $fileName = $this->createXmlFile($xmlContent, $pathFile);
                //Get Internal link
                $internalLink = $baseUrl . '/' . $fileName;
                $entity->setInternalLink($internalLink);
            }
            $entity->setStatus(1);
        } else {
            $entity->setStatus(0);
        }

        $em->persist($entity);
        $em->flush();
    }
}
